{
  "export_info": {
    "project_name": "DipMaster Enhanced V4 Trading System",
    "export_date": "2025-08-16",
    "version": "4.0.0",
    "description": "Complete agents configuration for DipMaster quantitative trading system",
    "total_agents": 9,
    "claude_version": "compatible with Claude Code"
  },
  "agents": [
    "strategy-orchestrator",
    "data-infrastructure-builder", 
    "feature-engineering-labeler",
    "model-backtest-validator",
    "portfolio-risk-optimizer",
    "execution-microstructure-oms",
    "monitoring-log-collector",
    "dashboard-api-kafka-consumer",
    "frontend-dashboard-nextjs"
  ],
  "installation_instructions": {
    "mac_setup": [
      "1. Clone repository: git clone https://github.com/Gyarados4157/DipMaster-Trading-System.git",
      "2. Copy .claude directory to your project root",
      "3. Copy .claude-config.json to project root",
      "4. Copy .env.claude to project root (optional)",
      "5. Restart Claude Code to load agents",
      "6. Verify agents are loaded in Claude Code settings"
    ],
    "agent_verification": [
      "Open Claude Code settings",
      "Navigate to MCP/Agents section", 
      "Confirm all 9 agents are listed and active",
      "Test agent functionality with simple queries"
    ]
  },
  "required_files": [
    ".claude/agents/*.md",
    ".claude/settings.local.json",
    ".claude-config.json",
    ".env.claude",
    "mcp-config.json"
  ],
  "agent_descriptions": {
    "strategy-orchestrator": "Translates high-level trading goals into executable milestones, manages dependencies and workflow",
    "data-infrastructure-builder": "Builds and maintains market data infrastructure, handles data quality and storage",
    "feature-engineering-labeler": "Transforms raw market data into ML-ready features and supervised labels",
    "model-backtest-validator": "Trains ML models and validates through rigorous time-series backtesting",
    "portfolio-risk-optimizer": "Transforms signals into positions with risk constraints and capital allocation",
    "execution-microstructure-oms": "Converts portfolio positions into optimal market orders with execution quality",
    "monitoring-log-collector": "Monitors system consistency, collects logs, generates operational reports",
    "dashboard-api-kafka-consumer": "Builds real-time dashboard API with Kafka events and database persistence",
    "frontend-dashboard-nextjs": "Creates and maintains Next.js trading dashboard for monitoring and alerts"
  },
  "workflow_example": {
    "description": "Typical development workflow using the agent system",
    "steps": [
      "1. strategy-orchestrator: Plan strategy development phases",
      "2. data-infrastructure-builder: Set up data pipeline and quality checks",
      "3. feature-engineering-labeler: Create ML features and labels",
      "4. model-backtest-validator: Train models and validate performance",
      "5. portfolio-risk-optimizer: Build portfolio optimization framework",
      "6. execution-microstructure-oms: Implement order execution system",
      "7. monitoring-log-collector: Set up monitoring and logging",
      "8. dashboard-api-kafka-consumer: Build backend API services",
      "9. frontend-dashboard-nextjs: Create monitoring dashboard"
    ]
  },
  "dependencies": {
    "python_packages": [
      "pandas>=1.5.0",
      "numpy>=1.24.0", 
      "scikit-learn>=1.3.0",
      "lightgbm>=4.0.0",
      "xgboost>=1.7.0",
      "kafka-python>=2.0.2",
      "fastapi>=0.100.0",
      "websockets>=11.0.0",
      "ta>=0.10.2"
    ],
    "node_packages": [
      "next>=14.0.0",
      "react>=18.0.0",
      "typescript>=5.0.0",
      "tailwindcss>=3.0.0"
    ],
    "system_requirements": [
      "Python 3.11+",
      "Node.js 18+",
      "Git",
      "Claude Code (latest version)"
    ]
  },
  "performance_targets": {
    "win_rate": "85%+",
    "max_drawdown": "<3%",
    "profit_factor": "1.8+",
    "sharpe_ratio": ">2.0",
    "monthly_return": "12-20%"
  },
  "usage_notes": [
    "Each agent is specialized for specific trading system components",
    "Use agents in sequence for systematic development",
    "Agents coordinate through shared configuration and data formats",
    "All agents support both development and production environments",
    "Comprehensive error handling and logging built into each agent"
  ]
}